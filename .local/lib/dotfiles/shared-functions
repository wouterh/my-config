#!/usr/bin/env bash
export DOTFILES=$HOME/.local/lib/dotfiles

# ensure we capture unexpected exits
trap exit_warning EXIT

done_message="installed"

# prevent wrapping around for very long lines (gives issue with spinner)
tput rmam

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [[ -t 1 ]] && [[ -n "$ncolors" ]] && [[ "$ncolors" -ge 8 ]]; then
  BLACK="$(tput setaf 0)"
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  MAGENTA="$(tput setaf 5)"
  CYAN="$(tput setaf 6)"
  WHITE="$(tput setaf 7)"
  BOLD="$(tput bold)"
  DIM="$(tput setaf 246)"
  NORMAL="$(tput sgr0)"
else
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  MAGENTA=""
  CYAN=""
  WHITE=""
  BOLD=""
  DIM=""
  NORMAL=""
fi

function ask_sudo_password() {
  # Ask for the administrator password upfront
  _title_ "We'll ask for your password once upfront..."
  sudo -v

  # Keep-alive: update existing `sudo` time stamp until `osx.sh` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

###
# The main spinner process, which contains the loop
###
function _spinner_process() {
  local dir statefile state msg pid="$1" spinner_index=0

  # Find the directory and load the statefile
  dir="$HOME/.dotfiles/.spinner"
  statefile="$dir/$pid"

  # The frames that, when animated, will make up
  # our spinning indicator
  frames=("⠋ " "⠉ " "⠈⠁" " ⠉" " ⠙" " ⠹" " ⠸" " ⠼" " ⠴" " ⠤" "⠠⠄" "⠤ " "⠦ " "⠧ " "⠇ " "⠏ ")
  interval="0.08"

  # Create a never-ending loop
  while [[ 1 -eq 1 ]]; do
    # Check for the existence of the parent process
    $(kill -s 0 $pid 2&>/dev/null)

    # If process doesn't exist, exit the script
    # to prevent it from being orphaned
    if [[ $? -ne 0 ]]; then
      return 1
    fi

    # If the statefile has been removed, exit the script
    # to prevent it from being orphaned
    if [ ! -f $statefile ]; then
      exit 1
    fi


    # Load the current state, and parse it to get
    # the message to be displayed
    state=($(cat $statefile 2>/dev/null))
    state=("${state[@]:1}")
    msg="${state[@]}"

    # Output the current spinner frame, and add a
    # slight delay before the next one
    _spinner_spin
    sleep ${interval:-"0.1"}
  done
}

###
# Output the spinner itself, along with a message
###
function _spinner_spin() {
  local dir statefile state pid frame

  # ZSH arrays start at 1, so we need to bump the index if it's 0
  if [[ $spinner_index -eq 0 ]]; then
    spinner_index+=1
  fi

  # Calculate the screen width
  lim=$(tput cols)

  # Clear the line and move the cursor to the start
  printf "\r"

  # Echo the current frame and message, and overwrite
  # the rest of the line with white space
  #msg="\033[0;38;5;242m${msg}\033[0;m"
  #set ${frames[$spinner_index]}
  frame="${frames[${spinner_index}]}"
  #frame="${${(@z)frames}[$spinner_index]//\"}"
  printf '%*.*b' ${#msg} $lim " [ \033[00;37m$frame\033[0m ] $msg$(printf '%0.1s' " "{1..$lim})"

  # Return to the beginning of the line
  printf "\r"

  # Set the spinner index to the next frame
  spinner_index=$(( $(( $spinner_index + 1 )) % $(( ${#frames[@]} )) ))
}

###
# Stop the current spinner process
###
function _spinner_stop() {
  local dir statefile state pid

  # Find the directory and load the statefile
  dir="$HOME/.dotfiles/.spinner"
  statefile="$dir/$PPID"

  # If the statefile does not exist, raise an error.
  # The spinner process itself performs the same check
  # and kills itself, so it should never be orphaned
  if [ ! -f $statefile ]; then
    tput cnorm

    # Clear the line and move the cursor to the start
    printf ' %.0s' {1..$(tput cols)}
    printf "\r"

    return 1
  fi

  # Get the current state, and parse it to find the PID
  # of the spinner process
  state=($(cat $statefile 2>/dev/null))
  if [[ ! -z $state ]]; then
    pid=${state[0]}
  fi

  # If a PID has been found, kill the process
  if [[ ! -z $pid ]]; then
    kill "$pid" >/dev/null 2>&1
    wait "$pid" 2>/dev/null
  fi
  unset pid

  tput cnorm

  # Clear the line and move the cursor to the start
  tput el
  printf "\r"

  # Remove the statefile
  rm $statefile
}

###
# Update the message being displayed
function _spinner_update() {
  local dir statefile state pid msg="$1"

  # Find the directory and load the statefile
  dir="$HOME/.dotfiles/.spinner"
  statefile="$dir/$PPID"

  # If the statefile does not exist, raise an error.
  # The spinner process itself performs the same check
  # and kills itself, so it should never be orphaned
  if [ ! -f $statefile ]; then
    # echo '\033[0;31mRevolver process could not be found\033[0;m'
    return 1
  fi

  # Get the current state, and parse it to find the PID
  # of the spinner process
  state=($(cat $statefile 2>/dev/null))
  pid=${state[0]}

  # Clear the line and move the cursor to the start
  tput el
  printf "\r"

  # Echo the new message to the statefile, to be
  # picked up by the spinner process
  echo "$pid $msg" > $statefile
}

###
# Create a new spinner with the specified message
###
function _spinner_start() {
  local dir statefile msg="$1"
  tput civis

  # Find the directory and create it if it doesn't exist
  dir="$HOME/.dotfiles/.spinner"
  if [[ ! -d $dir ]]; then
    mkdir -p $dir
  fi

  # Create the filename for the statefile
  statefile="$dir/$PPID"

  touch $statefile
  if [ ! -f $statefile ]; then
    echo '\033[0;31mSpinner process could not create state file\033[0;m'
    echo "Check that the directory $dir is writable"
    return 1
  fi

  # Start the spinner process in the background
  _spinner_process $PPID &

  # Save the current state to the statefile
  echo "$! $msg" > $statefile
}

function clean_spinner_leftovers() {
  local dir spinners pid

  dir="$HOME/.dotfiles/.spinner"
  if [[ -d $dir ]]; then
    spinners=($(ls "$dir"))
    for pid in "${spinners[@]}"
    do
      kill "$pid" >/dev/null 2>&1
      wait "$pid" 2>/dev/null
      rm -rf "$HOME/.dotfiles/.spinner/$pid"
    done


  fi
}

function header() {
  # as this is called at the start of each script, cleanup spinner leftover
  clean_spinner_leftovers

  headertitle="$*"
  headertitle_length=${#headertitle}
  padding=$(expr 84 - $headertitle_length)
  padding=$(expr $padding / 2 - 1)
  printf '%s' "$DIM"
  printf '%s\n' "===================================================================================="
  printf '%s' "$NORMAL$BOLD"
  cat $DOTFILES/banner.txt
  printf '%s' "$DIM"
  printf '%s\n' "************************************************************************************"
  printf '%s' "$NORMAL$BOLD"
  printf "%*s%s%*s\n" $padding "" "$headertitle" $padding ""
  printf '%s' "$DIM"
  printf '%s\n' "===================================================================================="
  printf '%s\n' "$NORMAL"
}

function mini_header() {
  # as this is called at the start of each script, cleanup spinner leftover
  clean_spinner_leftovers

  headertitle="$*"
  headertitle_length=${#headertitle}
  padding=$(expr 66 - $headertitle_length)
  padding=$(expr $padding / 2 - 1)
  printf '%s' "$DIM"
  printf '%s\n' "================================================================="
  printf '%s' "$NORMAL$BOLD"
  printf "%*s%s%*s\n" $padding "" "$headertitle" $padding ""
  printf '%s' "$DIM"
  printf '%s\n' "================================================================="
  printf '%s\n' "$NORMAL"
}


# for printing standard echoish messages
notice() {
  printf "        $1\n"
}

notice_left() {
  printf "$1\n"
}

# for replacing previous input prompts with success messages
success() {
  _spinner_stop
  printf "\r\033[2K [ \033[00;32mOK\033[0m ] $*\n"
}

# for printing logging messages that *may* be replaced by
# a success/warn/error message
status() {
  _spinner_update "$1"
  #printf "\r\033[2K [ \033[00;34m..\033[0m ] $1"
}

info() {
  proceed=1
  _spinner_start "$1"
  #printf "\r\033[2K [ \033[00;34m..\033[0m ] $1"
  message="$1"
  if [[ ! -z "$2" ]]; then
    done_message="$2"
  fi
}

info_no_spinner() {
  proceed=1
  _spinner_stop
  printf "\r\033[2K [ \033[00;34m..\033[0m ] $1"
  message="$1"
  if [[ ! -z "$2" ]]; then
    done_message="$2"
  fi
}

# for printing prompts that expect user input and will be
# replaced by a success/warn/error message
user () {
  _spinner_stop
  printf "\r\033[2K [ \033[00;33m??\033[0m ] $*"
}

# for replacing previous input prompts with warnings
warn () {
  _spinner_stop
  printf "\r\033[2K [\033[0;33mWARN\033[0m] $1\n"
}

# for replacing previous prompts with errors
fail () {
  _spinner_stop
  printf "\r\033[2K [\033[0;31mFAIL\033[0m] $* ${DIM}=> check ${WHITE}${LOGFILE}${NORMAL}${DIM} for more information.${NORMAL}\n"
}

successfully() {
  current_dir=$(pwd)
  if [[ $proceed -ne 0 ]]; then
    echo "We are proceeding with the command: $*" >> $LOGFILE 2>&1
    eval "$1" >> $LOGFILE 2>&1
    result=$?
    if [[ $result -ne 0 ]]; then
      if [[ ! -z "$2" ]]; then
        fail "$message : ${BOLD}failed${NORMAL}, $2" 2>&1
      else
        fail "$message : ${BOLD}failed${NORMAL}" 2>&1
      fi
      return 1
    else
      success "$message : ${BOLD}$done_message${NORMAL}"
      done_message="installed"
    fi
  fi
  cd $current_dir
}

check() {
  current_dir=$(pwd)
  _spinner_start "$1 : checking"
  echo "Checking $1, running $2:\n" >> $LOGFILE 2>&1
  eval "$2" > /dev/null 2>&1
  result=$?
  if [[ $result -ne 0 ]]; then
    proceed=1
    status "$1 : ${BOLD}installing${NORMAL}"
    message="$1"
  else
    proceed=0
    if [[ ! -z "$3" ]]; then
      status "$1 : ${BOLD}updating${NORMAL}"
      eval "$3" >> $LOGFILE 2>&1
      success "$1 : ${BOLD}up-to-date${NORMAL}"
    else
      success "$1 : ${BOLD}found${NORMAL}"
    fi
  fi
  cd $current_dir
}

_title_ () {
  printf "\n${BOLD}$1${NORMAL}\n\n"
}

# Print update in blue.
# $1: update message
update() {
  printf "\e[0;34m$1\e[0m\n"
}

# Print error in red and exit.
# $1: error message
err_and_exit() {
  printf "\e[0;31m$1\e[0m\n"
  exit 1
}

link_files () {
  ln -s "$1" "$2"
  filename=$(basename "$1")
  destination="$2"
  success "symlinked ${BOLD}$filename${NORMAL} to ${destination/$HOME/'~'}"
}

# Get yes or no input from the user. Return default value if the user does no
# enter a valid value (y, yes, n, or no with any captialization).
# $1: prompt
# $2: default value
user_ask_yn() {
  _spinner_stop
  prefix=" [ ${YELLOW}??${NORMAL} ]"
  if [[ "$2" = "y" ]]; then
    prompt="${1} [Y/n]: "
  elif [[ "$2" = "n" ]]; then
    prompt="${1} [y/N]: "
  else
    echo "Error: bad default value given to user_ask_yn()" >&2
    exit 1
  fi

  read -n 1 -r -p "$prefix $prompt" input
  case "$input" in
    [yY][eE][sS] | [yY])
      user_ask_yn_result="y"
      echo ''
      ;;
    [nN][oO] | [nN])
      user_ask_yn_result="n"
      echo ''
      ;;
    *)
      user_ask_yn_result=$2
      ;;
  esac
}

user_wait_for_key() {
  _spinner_stop
  prefix=" [ ${YELLOW}??${NORMAL} ]"
  prompt="${1}"

  read -n 1 -r -p "$prefix $prompt" input
}

# Exit with an error if the script is not being run on a Mac. (iOS development
# can only be done on Macs.)
ensure_mac_os() {
  if [[ "`uname -s`" != "Darwin" ]]; then
    err_and_exit "This script can only be run on Mac OS."
  fi
}

machine_type() {
  if [[ "`uname -s`" == "Darwin" ]]; then
    echo "macOS"
  else
    if [[ $(uname -r) =~ Microsoft$ ]]; then
      echo "Ubuntu on Windows"
    else
      echo "your machine"
    fi
  fi
}

# If we exit unexpectedly, log this warning.
# Scripts should call "trap exit_warning EXIT" near the top to enable,
# then "trap finish EXIT" just before exiting on success.
exit_warning() {
  # restore shell
  finish

  echo "${BOLD}${RED}"
  echo ""
  echo "***           FATAL ERROR: dotfiles-setup crashed!             ***"
  echo "***       Please check the /tmp/dotfiles-setup logs for        ***"
  echo "***   common errors, or send the output above to @engineering. ***${NORMAL}"
}

finish() {
  # ensure the spinner is stopped
  _spinner_stop

  # restore wrapping around long lines of text
  tput smam
}

install_fzf() {
	_title_ 'Installing fzf'
	check 'fzf' "command -v fzf"
	if [[ $proceed -ne 0 ]]
	then
		successfully "install-fzf"
	fi

	if ! ls "$HOME/.oh-my-zsh/cache/zsh_plugin_paths" > /dev/null 2>&1 || grep -q "$HOME/.oh-my-zsh/cache/zsh_plugin_paths" "FZF_BASE" > /dev/null 2>&1; then
    tput el
    printf "\r"
    echo "FZF_BASE=\"/usr/share/doc/fzf/examples\"" >> $HOME/.oh-my-zsh/cache/zsh_plugin_paths
  fi
}
